'Complete the Syllabus statement:
'Ash is preparing for his End semester exams and there are total K topics which he has to cover so 
'that he can perform well in it. He has decided that he will study the topics sequentially. So, he 
'is going to start from "MONDAY". Ash has got a very tight schedule and for each day of the week he 
'already knows how many topics will he be able to study on a particular day. 
'It is guaranteed that Ash will not skip any day and will follow the routine sincerely, Determine on 
'which day of the week will he be able to complete all the topics. (1st day of week is assumed to be MONDAY).

'INPUT:- _
'First line of each test file contains the number of test cases T, Each test case will contain a positive integer 
'K followed by array A in the next line which has 7 integers denoting the number of topics which Ash will be able to 
'cover on a particular day of week A[0] will be for MONDAY, A[1] will be for TUESDAY ,..., A[6] will be SUNDAY. 

'OUTPUT:- 
'For each test case print the day of week in capital letters on which he will complete his syllabus. _

'SAMPLE INPUT 
'3
'7
'1 1 1 1 1 1 1
'2
'1 1 0 0 0 0 0
'10
'0 0 0 0 0 0 1 

'sample OUTPUT
'SUNDAY
'TUESDAY
'SUNDAY _

'Explanation _
'For the first test case its quiet evident that Ash will complete the syllabus on SUNDAY. 
'For the second on every MONDAY and TUESDAY he is going to complete one topic but there are only 2 of them,
'so he will complete it on TUESDAY. For the last test case Ash is going to cover 1 topic on every SUNDAY
'so he will complete all the topics on SUNDAY.

Sub initializesyllabus()

Dim dayarray(1 To 7) As String
Dim topicarray(1 To 7) As Long

'Initializing day of Week

dayarray(1) = UCase("Monday")
dayarray(2) = UCase("Tuesday")
dayarray(3) = UCase("Wednesday")
dayarray(4) = UCase("Thursday")
dayarray(5) = UCase("Friday")
dayarray(6) = UCase("Saturday")
dayarray(7) = UCase("Sunday")

'Initializing topics per day of week

topicarray(1) = 2
topicarray(2) = 2
topicarray(3) = 1
topicarray(4) = 0
topicarray(5) = 0
topicarray(6) = 2
topicarray(7) = 2

'sumtopic is the sum of topics per week, in our case its 9

Dim sumtopic As Long
sumtopic = 0

For i = 1 To 7
    sumtopic = sumtopic + topicarray(i)
Next

'totaltopic refers to number of topics in all to be covered
'weektopic refers to cumulative frequency of topics of week
'The day of the week that's the final ans will depend on the remainder we get when
'are divided by topics per week _
    'for loop below does exactly that

Dim totaltopic, weektopic As Long
totaltopic = 10
weektopic = 0

For i = 1 To 7
    weektopic = weektopic + topicarray(i)
        If getremainder(totaltopic, sumtopic) <= weektopic Then
            Dim answer As String
            answer = dayarray(i)
            Debug.Print answer
            Exit For
        End If
Next

End Sub

Function getquotient(ByVal dividend As Long, ByVal divisor As Long)

getquotient = WorksheetFunction.Quotient(dividend, divisor)

End Function

Function getremainder(ByVal dividend As Long, ByVal divisor As Long)

getremainder = dividend Mod divisor

End Function

'Print HackerEarth Statement _
'As a beginner to the programming, Mishki came to Hackerearth platform, to become a better programmer. 
'She solved some problems and felt very confident. Later being a fan of Hackerearth, she gave a problem
'to her friends to solve. They will be given a string containing only lower case characters (a-z), and they need
'to find that by using the characters of the given string, how many times they can print "hackerearth"(without quotes).
'As they are new to programming world, please help them. _

'Input:
'The first line will consists of one integer N denoting the length of string.
'Next line will contain the string Str containing only lower case characters. _

'Output:
'Print one integer, denoting the number of times her friends can print "hackerearth" (without quotes). 

'SAMPLE INPUT
'13
'aahkcreeatrha

'SAMPLE Output
'1

'Explanation
'Here by using the characters of string, her friends can print "hackerearth" (without quotes) only 1 time

Sub findcount()
Dim text As String
Dim given As Variant

'"text" contains all unique elements in "hackerearth". The whole word "hackerearth" not included for simplicity.

text = "hackrte"
'Initializing elements of "text" in array
Dim textarray() As String
ReDim textarray(1 To Len(text))
For i = 1 To Len(text)
    textarray(i) = Mid(text, i, 1)
Next

given = "aahcreeatrha"
'Initializing elements of "given" in array
Dim givenarray() As String
ReDim givenarray(1 To Len(given))
For i = 1 To Len(given)
    givenarray(i) = Mid(given, i, 1)
Next

Dim countarray() As Integer
ReDim countarray(1 To Len(text))
j = 0

' "countarray" has the same number of elements as "text". It stores the number of times a particular element of_
' "text" is present in "given"

' For loop works automatically over all elements of "given", keeping elememt of "text" i.e j as constant.
' For loop finds all the elements in "given" which are equal to "h" i.e first element of "text", as it finds it,_
'the flag keeps incrementing in every loop. As it finds all, then it goes to next element of "text" i.e "a". And so on.

For j = 1 To Len(text)
    Dim Flag As Integer
    Flag = 0
    For i = 1 To Len(given)
        If givenarray(i) = textarray(j) Then
            Flag = Flag + 1
            countarray(j) = Flag
        End If
    Next
Next

Dim idealarray() As Integer
ReDim idealarray(1 To Len(text))

'If the outputarray has 2,2,1,1,2,1,2 is  the same as testarray, then count is 1. if the output is 2*(2,2,1,1,2,1,2) then, count  = 2.
'Testarray stores the count of all occurring alphabets in string 'hackerearth'. It is used to test whether in the given string, _
'hackerearth occurs or not, if it does, then how many times.

idealarray(1) = 2
idealarray(2) = 2
idealarray(3) = 1
idealarray(4) = 1
idealarray(5) = 2
idealarray(6) = 1
idealarray(7) = 2

Dim Output() As Integer
ReDim Output(1 To Len(text))

For x = 1 To Len(text)
    If countarray(x) >= idealarray(x) Then
        Output(x) = getquotient(countarray(x), idealarray(x))

    ElseIf countarray(x) < idealarray(x) Then
            Exit For
    End If
Next

Dim solution As Integer
solution = WorksheetFunction.Min(Output)
Debug.Print solution

End Sub
